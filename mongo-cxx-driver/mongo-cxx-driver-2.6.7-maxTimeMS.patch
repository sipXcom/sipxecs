diff -ur mongo-cxx-driver-legacy-0.0-26compat-2.6.7.orig/src/mongo/client/dbclient.cpp mongo-cxx-driver-legacy-0.0-26compat-2.6.7/src/mongo/client/dbclient.cpp
--- mongo-cxx-driver-legacy-0.0-26compat-2.6.7.orig/src/mongo/client/dbclient.cpp	2015-01-29 20:41:04.000000000 +0200
+++ mongo-cxx-driver-legacy-0.0-26compat-2.6.7/src/mongo/client/dbclient.cpp	2015-02-18 18:10:30.342949382 +0200
@@ -239,6 +239,7 @@
     const BSONField<BSONObj> Query::ReadPrefField("$readPreference");
     const BSONField<string> Query::ReadPrefModeField("mode");
     const BSONField<BSONArray> Query::ReadPrefTagsField("tags");
+    static const char* maxTimeMsField = "$maxTimeMS";
 
     Query::Query( const string &json ) : obj( fromjson( json ) ) {}
 
@@ -274,6 +275,11 @@
         return *this;
     }
 
+    Query& Query::maxTimeMs(int millis) {
+        appendComplex( maxTimeMsField, millis );
+        return *this;
+    }
+
     Query& Query::explain() {
         appendComplex( "$explain", true );
         return *this;
@@ -356,6 +362,10 @@
                 hasReadPrefOption;
     }
 
+    bool Query::hasMaxTimeMs() const {
+        return obj.hasField( maxTimeMsField );
+    }
+
     BSONObj Query::getFilter() const {
         bool hasDollar;
         if ( ! isComplex( &hasDollar ) )
@@ -376,6 +386,11 @@
             return BSONObj();
         return obj.getObjectField( "$hint" );
     }
+
+    int Query::getMaxTimeMs() const {
+        return obj.getIntField(maxTimeMsField);
+    }
+
     bool Query::isExplain() const {
         return isComplex() && obj.getBoolField( "$explain" );
     }
diff -ur mongo-cxx-driver-legacy-0.0-26compat-2.6.7.orig/src/mongo/client/dbclientinterface.h mongo-cxx-driver-legacy-0.0-26compat-2.6.7/src/mongo/client/dbclientinterface.h
--- mongo-cxx-driver-legacy-0.0-26compat-2.6.7.orig/src/mongo/client/dbclientinterface.h	2015-01-29 20:41:04.000000000 +0200
+++ mongo-cxx-driver-legacy-0.0-26compat-2.6.7/src/mongo/client/dbclientinterface.h	2015-02-18 18:10:30.342949382 +0200
@@ -389,6 +389,12 @@
         Query& hint(BSONObj keyPattern);
         Query& hint(const string &jsonKeyPatt);
 
+        /**
+         * Specifies a cumulative time limit in milliseconds for processing an operation.
+         * MongoDB will interrupt the operation at the earliest following interrupt point.
+         */
+        Query& maxTimeMs(int millis);
+
         /** Provide min and/or max index limits for the query.
             min <= x < max
          */
@@ -450,11 +456,13 @@
         BSONObj getSort() const;
         BSONObj getHint() const;
         bool isExplain() const;
+        int getMaxTimeMs() const;
 
         /**
          * @return true if the query object contains a read preference specification object.
          */
         static bool hasReadPreference(const BSONObj& queryObj);
+        bool hasMaxTimeMs() const;
 
         string toString() const;
         operator string() const { return toString(); }
