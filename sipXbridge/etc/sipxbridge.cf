# Copyright (c) 2012 eZuce, Inc. All rights reserved.
# Contributed to SIPfoundry under a Contributor Agreement

# This software is free software; you can redistribute it and/or modify it under
# the terms of the Affero General Public License (AGPL) as published by the
# Free Software Foundation; either version 3 of the License, or (at your option)
# any later version.

# This software is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
# details.

#
# sipXbridge configuration and process management
#
bundle agent sipxbridge {
  methods:
    sipxbridge::
      "any" usebundle => sipxbridge_config;
    any::
      "any" usebundle => sipxbridge_logwatcher;
      "any" usebundle => sipxbridge_running;
}

bundle agent sipxbridge_config {
  vars:
    any::
      "xml_file" slist => {
        "sipxbridge.xml",
        "peeridentities.xml"
      };

  files:
    any::
      "$(sipx.SIPX_CONFDIR)/$(xml_file)"
        comment => "install sipxbridge config $(this.promiser)",
        create => "true",
        perms => m("644"),
        copy_from => copy_from_cfdata("$(sipx.location_id)/$(xml_file)"),
        classes => if_repaired("restart_sipxbridge");
}

bundle agent sipxbridge_logwatcher {
  files:
    "$(sipx.SIPX_CONFDIR)/sipxlogwatcher.d/sipxbridge.sec"
      comment => "sipxbridge log watcher",
      create => "true",
      perms => m(644),
      transformer => "$(sipx.SIPX_LIBEXECDIR)/sipxlogwatcher-maker --in $(sipx.SIPX_CFDATA)/$(sipx.location_id)/alarms.yaml --template $(sipx.SIPX_CONFDIR)/sipxbridge/sipxbridge.sec.erb --out $(this.promiser)",
      classes => if_repaired("reload_sipxlogwatcher");
}

bundle agent sipxbridge_running {
  vars:
    any::
      "service_command" string => ".*\s-Dprocname=sipxbridge\s.*";

  methods:
    any::
      "any" usebundle => find_sipxservice_by_command_regex("$(service_command)","sipxbridge_running");
    !src.sipxbridge::
      "any" usebundle => rh_chkconfig_status("sipxbridge on");
    !src.!sipxbridge::
      "any" usebundle => rh_chkconfig_status("sipxbridge off");

  commands:
    (!sipxbridge|stop_sipxecs).sipxbridge_running::
      "$(sipx.SIPX_SERVICEDIR)/sipxbridge"
        comment => "stop sipxbridge",
        args => "stop";

    sipxbridge.!sipxbridge_running.!stop_sipxecs::
      "$(sipx.SIPX_SERVICEDIR)/sipxbridge"
        comment => "start sipxbridge",
        args => "start";

    sipxbridge.sipxbridge_running.(restart_sipxecs|restart_sipxbridge|java_ssl_repaired)::
      "$(sipx.SIPX_SERVICEDIR)/sipxbridge"
        comment => "restart sipxbridge",
        args => "restart";
}
