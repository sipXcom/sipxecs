#!/bin/bash

# sipxcallback - Startup script for sipxcallback

# chkconfig: 35 97 15
# description: sipxcallback is Call Back on Busy using FreeSwitch
# processname: sipxcallback

#
# Copyright (C) 2015 sipXcom., certain elements licensed under a Contributor Agreement.
# Contributors retain copyright to elements licensed under a Contributor Agreement.
# Licensed to the User under the LGPL license.

. /etc/rc.d/init.d/functions || exit 1
. @SIPX_LIBEXECDIR@/sipx-utils.sh || exit 1

prog=sipxcallback
pidfile="@SIPX_RUNDIR@/sipxcallback.pid"

[ -e @SIPX_CONFDIR@/sysconfig/$prog ] && . @SIPX_CONFDIR@/sysconfig/$prog

checkRunningInstance() {
  if [ -f "${pidfile}" ]; then
    pid=`cat ${pidfile}`
    if checkpid $pid 2>&1; then
      echo "Process $prog is already running with pid $pid"
      exit 1
    fi
  fi
}

start() {
    checkRunningInstance

    JavaCmd=`@SIPX_BINDIR@/sipx-config --java`
    Dependencies=`@SIPX_BINDIR@/java-dep -d @SIPX_JAVADIR@/sipXcommons @sipxcall_PKGS@`
    export CLASSPATH=`echo @SIPX_CONFDIR@/sipxcallback @SIPX_JAVADIR@/sipXcallback/*.jar ${Dependencies} | sed -e 's/ /:/g'`

    setJavaSslOpts

    # procname is there so cfengine can find it
    Command="$JavaCmd \
      -Dprocname=sipxcallback \
      -Dconf.dir=@SIPX_CONFDIR@ \
      -Dlog.dir=@SIPX_LOGDIR@ \
      -Dvar.dir=@SIPX_VARDIR@ \
      -Dstdprompts.dir=@wwwdir@/doc/stdprompts \
      $JavaSslOpts \
      ${SIPXCALL_OPTS} \
         org.sipfoundry.sipxcallback.SipXcallbackServer \
	 $Args"
    if [ -n "${NoFork}" ] ; then
      runuser -s /bin/bash @SIPXPBXUSER@ -c "${Command}"
    else
      echo -n $"Starting sipxcallback: "
      runuser -s /bin/bash @SIPXPBXUSER@ -c "${Command}" >/dev/null 2>&1 &
      echo $! > ${pidfile}
      echo_success
    fi
}

stop() {
  echo -n $"Stopping sipxcallback: "
  killproc -p "${pidfile}" "sipxcallback"
  Status=$?
  echo
  [ $Status -eq 0 ] && rm -f "${pidfile}"
}

restart() {
  stop
  start
}

configtest() {
     sipx_config_exists @SIPX_CONFDIR@/sipxcallback.properties
     Status=$(($Status+$?))

     # Check that the log file is writable.
     logfile="@SIPX_LOGDIR@/sipxcallback.log"
     if [ -e $logfile -a ! -w $logfile ]
     then
         echo "Log file '$logfile' exists but is not writable." >&2
         Status=1
     fi
}

case "$1" in
  nofork)
    NoFork=1
    start
    ;;
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart|reload|force-reload)
    restart
    ;;
  condrestart)
    [ -f ${pidfile} ] && restart || :
    ;;
  status)
    status -p ${pidfile} sipxcallback
    ;;
  configtest)
    configtest
    ;;
  *)
    echo "Usage: $0 {start|stop|status|restart|reload|force-reload|condrestart|nofork|configtest}"
    Status=1
esac

exit $Status
