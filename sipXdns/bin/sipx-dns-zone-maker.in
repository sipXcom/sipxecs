#!/usr/bin/ruby

#
# Generated a zone file from data file with know server name and addresses
#

require 'optparse'
require 'erb'
require 'yaml'

args = OptionParser.new { |opts|
  opts.banner = "Usage : sipx-dns-zone-maker [options]"

  opts.separator ""
  opts.separator "Options:"

  opts.on("--help", "Print this help message.") {
    puts opts
    exit
  }

  opts.on("--example", "Print an example servers file") {
puts <<EOF
sip_protocols : [ udp, tcp, tls ]
naptr_protocols: [ udp, tcp ]
domain: x
proxy_servers : [ { :name: one, :ipv4: 1.1.1.1 } ]
registrar_servers: [ { :name: one, :ipv4: 1.1.1.1 } ]
dns_servers : [
 { :name: one, :ipv4: 1.1.1.1 },
 { :name: two, :ipv4: 2.2.2.2 } ]
im_servers : [ { :name: one, :ipv4: 1.1.1.1 } ]
all_servers : [
 { :name: one, :ipv4: 1.1.1.1 },
 { :name: two, :ipv4: 2.2.2.2 },
 { :name: three, :ipv4: 3.3.3.3 } ]
EOF
  exit
  }

  $template = '@SIPX_CONFDIR@/sipxdns/zone.erb'
  opts.on("--template FILE", "ERB formated template. Default is #{$template}") {|f|
    $template = f
  }

  $yaml = '@SIPX_CFDATA@/zone.yaml'
  opts.on("--in FILE", "YAML formated file for servers. Default is #{$yaml}") {|f|
    $yaml = f
  }

  $out = STDOUT
  opts.on("--out FILE", "Write to file, otherwise output is sent to stdout") {|f|
    $out = File.open(f, 'w')
  }
}
args.parse!

# you can put defaults to optional data here so if yaml doesn't define them you get reasonable defaults
serialno = Time.now.to_i

data = YAML::load_file($yaml)

var = binding
data.each_key { |x|
  eval "#{x} = data['#{x}']", var
}

erb = ERB.new(File.read($template))
erb.filename = $template
$out.puts erb.result(var)
