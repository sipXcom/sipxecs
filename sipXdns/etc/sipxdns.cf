# Copyright (C) 2012 eZuce Inc., certain elements licensed under a Contributor Agreement.
# Contributors retain copyright to elements licensed under a Contributor Agreement.
# Licensed to the User under the AGPL license.

#
# Postgres configuration for working with sipxecs
#

bundle agent sipxdns {
  methods:
    sipxdns::
      "any" usebundle => "sipxdns_config";
    resolv::
      "any" usebundle => "sipxdns_resolv";
    any::
      "any" usebundle => "sipxdns_setup";
      "any" usebundle => "sipxdns_running";
}

bundle agent sipxdns_resolv {
  files:
    any::
      "/etc/resolv.conf"
         create => "true",
         perms => m(644),
         edit_line => resolv_conf,
    edit_defaults => std_defs;
}

bundle agent sipxdns_config {
  files:
    any::
      "$(sipx.SIPX_CFDATA)/$(sipx.location_id)/zone.yaml"
        changes => repair_on_change,
        classes => if_repaired("update_zone"),
        action => fix;

      "/etc/named.conf"
         create => "true",
         perms => mog(600, "named", "root"),
         edit_line => named_conf,
    edit_defaults => empty,
    classes => if_repaired("reload_sipxdns");
        
    update_zone::
      "/var/named/$(sipx.domain).zone"
        create => "true",
        perms => mog(600, "named", "named"),
        transformer => "$(sipx.SIPX_LIBEXECDIR)/sipx-dns-zone-maker --in $(sipx.SIPX_CFDATA)/$(sipx.location_id)/zone.yaml --out /var/named/$(sipx.domain).zone",
        classes => if_repaired("reload_sipxdns");

    reports:
      update_zone::
        "updating zone";
      !update_zone::
        "NOT updating zone";
}

body changes repair_on_change {
  hash           => "best";
  report_changes => "content";
  update_hashes  => "yes";
}

body action fix {
  action_policy => "fix";
}

bundle edit_line named_conf {
  insert_lines:
    "
options {
        directory  \"/var/named\";
        dump-file \"/var/named/data/cache_dump.db\";
        statistics-file \"/var/named/data/named_stats.txt\";
        forwarders {
        $(sipx.dnsForwarders)
        };
};

zone \"$(sipx.domain)\"  IN  {
     type master;
     file \"$(sipx.domain).zone\";
     allow-update { none; };
};
";
}

bundle edit_line resolv_conf {
  insert_lines:
    "# Generated by sipXecs ";
    "$(sipx.SIPX_CFDATA)/$(sipx.location_id)/resolv.conf.part"
      insert_type => "file";

  delete_lines:
    ".*";
}

bundle agent sipxdns_setup {
  methods:
    !src.sipxdns::
      "any" usebundle => rh_chkconfig_status("named on");
    !src.!sipxdns::
      "any" usebundle => rh_chkconfig_status("named off");
}

bundle agent sipxdns_running {
  vars:
    any::
      "service" string => "/etc/init.d/named";
      "service_command" string => "/usr/sbin/named";

  methods:
    any::
      "any" usebundle => find_service_by_command("$(service_command)", "sipxdns_running", "named");

  commands:
    # NOTE : Not shutting off  explicit stop function because we cannot tell if
    # admin is configuring and managing DNS on their own (which is the 
    # case for a lot of ezuce developers anyway)
    !src.!unmanaged_dns.!sipxdns.sipxdns_running::
     "$(service)"
       args => "stop",
      action => track("sipxdns stop");

    sipxdns.!sipxdns_running::
      "$(service)"
        args => "start",
        action => track("sipxdns start");

    sipxdns.restart_sipxdns::
      "$(service)"
        args => "restart",
        action => track("sipxdns restart");

    sipxdns.reload_sipxdns::
      "$(service)"
        args => "reload",
        action => track("sipxdns reload");
}