#!/bin/bash

# chkconfig: 2345 90 60
# description: SipXedge Daemon.
# processname: sipxwebrtc
# pidfile: /var/log/sipxpbx/sipxwebrtc.pid

### BEGIN INIT INFO
# Provides: sipxwebrtc
# Required-Start: $local_fs $remote_fs $network $named
# Required-Stop: $local_fs $remote_fs $network
# Short-Description: start and stop sipXedge watchdog
# Description: sipXedge watchdog watchdog
### END INIT INFO

EDGE_CONFIG=/etc/sipxpbx/edge/config
PID_FROM_PATH=${EDGE_CONFIG}/pid_from_path.pl

WEBRTC_PIDFILE=/var/log/sipxpbx/edge/sipxwebrtc.pid
MONIT_PIDFILE=/var/log/sipxpbx/edge/monit.pid
FREESWITCH_PIDFILE=/var/log/sipxpbx/edge/freeswitch.pid

WEBRTC_PROC=/usr/bin/sipxwebrtc
MONIT_PROC=/opt/sipxecs/edge/monit/bin/monit
FREESWITCH_PROC=/opt/sipxecs/edge/freeswitch/bin/freeswitch

do_setlimits()
{
  if [ "$(id -u)" != "0" ]; then
    return 1
  fi
  ulimit -c unlimited
  ulimit -d unlimited
  ulimit -f unlimited
  ulimit -n 999999
  ulimit -v unlimited
  ulimit -l unlimited
  return 0
}


# Get a sane screen width
[ -z "${COLUMNS:-}" ] && COLUMNS=80

if [ -z "${CONSOLETYPE:-}" ]; then
  if [ -c "/dev/stderr" ]; then
    CONSOLETYPE="$(/sbin/consoletype < /dev/stderr 2>/dev/null)"
  else
    CONSOLETYPE="serial"
  fi
fi

BOOTUP=color
RES_COL=60
MOVE_TO_COL="echo -en \\033[${RES_COL}G"
SETCOLOR_SUCCESS="echo -en \\033[1;32m"
SETCOLOR_FAILURE="echo -en \\033[1;31m"
SETCOLOR_WARNING="echo -en \\033[1;33m"
SETCOLOR_NORMAL="echo -en \\033[0;39m"
LOGLEVEL=1


echo_success()
{
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "["
  [ "$BOOTUP" = "color" ] && $SETCOLOR_SUCCESS
  echo -n $"  OK  "
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\r"
  return 0
}

echo_failure()
{
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "["
  [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
  echo -n $"FAILED"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\r"
  return 1
}


check_process()
{
  try=0
  delay=$2
  while [ $try -lt $delay ] ; do
    if [ -e "$1" ]; then
      pid=`cat $1`
      [ -d "/proc/$pid" ] && return 0
    fi
  sleep 1
  let try+=1
  done
  return 1
}

do_check_webrtc_process()
{
  if check_process "${WEBRTC_PIDFILE}" $1; then
    echo_success
    echo ""
    return 0
  else
    echo_failure
    echo ""
    return 1
  fi
}

do_check_monit_process()
{
  if check_process "${MONIT_PIDFILE}" $1; then
    echo_success
    echo ""
    return 0
  else
    echo_failure
    echo ""
    return 1
  fi
}

do_check_freeswitch_process()
{
  if check_process "${FREESWITCH_PIDFILE}" $1; then
    echo_success
    echo ""
    return 0
  else
    echo_failure
    echo ""
    return 1
  fi
}



killproc()
{
  try=0
  delay=$2
  pid=0
  if [ -e "$1" ]; then
    pid=`cat $1`
    [ -d "/proc/$pid" ] && kill $pid > /dev/null
  else
    return 0;
  fi

  while [ $try -lt $delay ] ; do
    [ -d "/proc/$pid" ] || return 0
    sleep 1
    let try+=1
  done

  [ -d "/proc/$pid" ] && kill -9 $pid /dev/null
  try=0
  while [ $try -lt 5 ] ; do
    [ -d "/proc/$pid" ] || return 0
    sleep 1
    let try+=1
  done
  return 1
}

assure_process_shutdown()
{
  try=0
  delay=$2
  pid=0
  if [ -e "$1" ]; then
    pid=`cat $1`
  else
    return 0;
  fi

  if [ -d "/proc/$pid" ]; then
    kill $3 $pid
  fi

  while [ $try -lt $delay ] ; do
    [ -d "/proc/$pid" ] || return 0
    sleep 1
    let try+=1
  done

  if [ -d "/proc/$pid" ]; then
    kill -9 $pid
  fi

  try=0
  while [ $try -lt 5 ] ; do
    [ -d "/proc/$pid" ] || return 0
    sleep 1
    let try+=1
  done
  return 1
}

do_assure_webrtc_shutdown()
{
  assure_process_shutdown "${WEBRTC_PIDFILE}" 30
  process_pid=`${PID_FROM_PATH} ${WEBRTC_PROC}`
  if [ "$process_pid" != "" ]; then
        kill -9 ${process_pid}
  fi
  echo_success
  echo ""
}

do_assure_monit_shutdown()
{
  ${MONIT_PROC} -c ${EDGE_CONFIG}/monitrc -p ${MONIT_PIDFILE} quit
  sleep 2
  assure_process_shutdown "${MONIT_PIDFILE}" 30
  process_pid=`${PID_FROM_PATH} ${MONIT_PROC}`
  if [ "$process_pid" != "" ]; then
        kill -9 ${process_pid}
  fi
  echo_success
  echo ""
}


do_start_monit()
{
  ${MONIT_PROC} -c ${EDGE_CONFIG}/monitrc -p ${MONIT_PIDFILE}
  echo -n $"Starting Monitor Service "
  sleep 2
  if do_check_monit_process 10; then
    #${MONIT_PROC} -c ${EDGE_CONFIG}/monitrc -p ${MONIT_PIDFILE} start all
    return 0
  fi
  return 1
}



obliterate()
{
    kill -9 `${PID_FROM_PATH} ${MONIT_PROC}`
    kill -9 `${PID_FROM_PATH} ${WEBRTC_PROC}`
    kill -9 `${PID_FROM_PATH} ${FREESWITCH_PROC}`
}

do_start()
{
  if check_process "${WEBRTC_PIDFILE}" 1; then
    echo "Service already running."
    return 0
  fi

  obliterate
  do_setlimits
  do_start_monit
  Status=$?
}

do_stop()
{
  echo -n "Stoping Monit"
  do_assure_monit_shutdown

  echo -n "Stopping WebRTC "
  do_assure_webrtc_shutdown

  echo -n "Stopping FreeSWITCH "
  do_assure_freeswitch_shutdown

  obliterate

  Status=$?
}

do_restart()
{
  do_stop
  do_start
  Status=$?
}


do_status()
{
  echo -n "Checking WebRTC "
  do_check_webrtc_process 1
  echo -n "Checking FreeSWITCH "
  do_check_freeswitch_process 1
  ${MONIT_PROC} -c ${EDGE_CONFIG}/monitrc -p ${MONIT_PIDFILE} status
  Status=$?
}



case "$1" in
  start)
    do_start
    ;;
  stop)
    do_stop
    ;;
  restart)
    do_restart
    ;;
  status)
    do_status
  ;;
*)
echo "Usage: $0 (start|stop|restart|status)"
esac

exit $Status