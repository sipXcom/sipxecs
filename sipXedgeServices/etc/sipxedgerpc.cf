# Copyright (c) 2014 eZuce, Inc. All rights reserved.
# Contributed to SIPfoundry under a Contributor Agreement

# This software is free software; you can redistribute it and/or modify it under
# the terms of the Affero General Public License (AGPL) as published by the
# Free Software Foundation; either version 3 of the License, or (at your option)
# any later version.

# This software is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
# details.

#
# Edge RPC server configuration and process management
#
bundle agent sipxedgerpc {
  methods:
    sipxedgerpc::
      "any" usebundle => "sipxedgerpc_config";
    any::
      "any" usebundle => "sipxedgerpc_running";
}

bundle agent sipxedgerpc_config {
  files:
    any::
      "$(sipx.SIPX_CONFDIR)/sipxedgerpc-config"
        comment => "install sipxedgerpc config $(this.promiser)",
        create => "true",
        perms => m("644"),
        edit_line => sipxedgerpc_config_contents(),
        classes => if_repaired("sipxedgerpc_properties_changed");
}

bundle edit_line sipxedgerpc_config_contents {
  insert_lines:
    any::
      "$(sipx.SIPX_CFDATA)/$(sipx.location_id)/sipxedgerpc-config.part"
        insert_type => "file";
      "log-file = $(sipx.SIPX_LOGDIR)/sipxedgerpc.log";
      
  delete_lines:
    any::
      ".*";
}

bundle agent sipxedgerpc_running {
  vars:
    any::
      "service_command" string => "$(sipx.SIPX_BINDIR)/sipxedgerpc";

  classes:
    sipxedgerpc.sipxedgerpc_properties_changed::
  	  "restart_sipxedgerpc" not => fileexists("$(sipx.SIPX_CONFDIR)/sipxedgerpc-config.cf-before-edit");			 

  methods:
    any::
      "any" usebundle => find_sipxservice_by_command("$(service_command)","sipxedgerpc_running");
    !src.sipxedgerpc::
      "any" usebundle => rh_chkconfig_status("sipxedgerpc on");
    !src.!sipxedgerpc::
      "any" usebundle => rh_chkconfig_status("sipxedgerpc off");
    sipxedgerpc.sipxedgerpc_properties_changed.!restart_sipxedgerpc::
      "sipxedgerpc_properties_changed" usebundle => refresh_sip_service("log-level=\d",
      										 "$(sipx.SIPX_CONFDIR)/sipxedgerpc-config",
      										 "$(sipx.SIPX_CONFDIR)/sipxedgerpc-config.cf-before-edit",
      										 "sipxedgerpc");

  commands:
    (!sipxedgerpc|stop_sipxecs).sipxedgerpc_running::
      "$(sipx.SIPX_SERVICEDIR)/sipxedgerpc"
        comment => "stop sipxedgerpc",
        args => "stop";

    sipxedgerpc.!sipxedgerpc_running.!stop_sipxecs::
      "$(sipx.SIPX_SERVICEDIR)/sipxedgerpc"
        comment => "start sipxedgerpc",
        args => "start";

    sipxedgerpc.sipxedgerpc_running.(restart_sipxedgerpc|restart_sipxecs)::
      "$(sipx.SIPX_SERVICEDIR)/sipxedgerpc"
        comment => "restart sipxedgerpc",
        args => "asyncrestart";
                
    sipxedgerpc.sipxedgerpc_running.refresh_sipxedgerpc::
      "/usr/bin/killall"
        comment => "refresh sipxedgerpc",
        args => "-HUP sipxedgerpc";
}

