# Copyright (C) 2012 eZuce Inc., certain elements licensed under a Contributor Agreement.
# Contributors retain copyright to elements licensed under a Contributor Agreement.
# Licensed to the User under the AGPL license.

#
# FreeSWITCH configuration and process management
#
bundle agent sipxfreeswitch {
  methods:
    any::
      "sipxfreeswitch" usebundle => "sipxfreeswitch_config";
      "any" usebundle => "sipxfreeswitch_setup";
      "any" usebundle => "sipxfreeswitch_running";
}

bundle agent sipxfreeswitch_config {
  vars:    
    any::
      "conference_file" string => "autoload_configs/conference.conf.xml";
      "conference_file_src" string => "$(sipx.SIPX_CFDATA)/$(location_id)/$(conference_file)";

      "xml_file" slist => { 
        "freeswitch.xml",
	"dialplan/sipX_context.xml",
	"sip_profiles/sipX_profile.xml",
        "autoload_configs/xml_rpc.conf.xml",
 	"autoload_configs/modules.conf.xml",
 	"autoload_configs/switch.conf.xml",
 	"autoload_configs/logfile.conf.xml",
 	"autoload_configs/local_stream.conf.xml"
      };

  classes:
    any::
      "conference_file_exists" expression => fileexists("$(conference_file_src)");

  files:
    conference_file_exists::
      "$(sipx.SIPX_CONFDIR)/freeswitch/conf/$(conference_file)"
        create => "false",
        perms => m("644"),
	copy_from => local_cp("$(conference_file_src)"),
        classes => if_repaired("restart_sipxfreeswitch"),
	action => track("$(conference_file)");

    any::
      "$(sipx.SIPX_CONFDIR)/freeswitch/conf/$(xml_file)"
        create => "false",
        perms => m("644"),
	copy_from => copy_from_cfdata("$(sipx.location_id)/$(xml_file)"),
        classes => if_repaired("restart_sipxfreeswitch"),
	action => track("$(xml_file)");
}

bundle agent sipxfreeswitch_setup {
  methods:
    !src.sipxfreeswitch::
      "any" usebundle => rh_chkconfig_status("sipxfreeswitch");
}

bundle agent sipxfreeswitch_running {
  vars:
    any::
      "service_command" string => "$(sipx.FREESWITCH_PREFIX)/bin/freeswitch";

  methods:
    any::
      "any" usebundle => find_sipxservice_by_command("$(service_command)","sipxfreeswitch_running");

  commands:
    sipxfreeswitch_running.!sipxfreeswitch::
      "$(sipx.SIPX_SERVICEDIR)/sipxfreeswitch"
        args => "stop",
	action => track("sipxfreeswitch stop");

    !sipxfreeswitch_running.sipxfreeswitch::
      "$(sipx.SIPX_SERVICEDIR)/sipxfreeswitch"
        args => "start",
	action => track("sipxfreeswitch start");

    restart_sipxfreeswitch::
      "$(sipx.SIPX_SERVICEDIR)/sipxfreeswitch"
        args => "restart",
	action => track("sipxfreeswitch restart");
}



