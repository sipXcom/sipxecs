# Copyright (C) 2012 eZuce Inc., certain elements licensed under a Contributor Agreement.
# Contributors retain copyright to elements licensed under a Contributor Agreement.
# Licensed to the User under the AGPL license.

#
# FreeSWITCH configuration and process management
#
bundle agent sipxfreeswitch {
  methods:
    sipxfreeswitch::
      "any" usebundle => "sipxfreeswitch_config";
    any::
      "any" usebundle => "sipxfreeswitch_setup";
      "any" usebundle => "sipxfreeswitch_running";
}

bundle agent sipxfreeswitch_config {
  vars:    
    any::
      "conference_file" string => "$(sipx.SIPX_CONFDIR)/freeswitch/conf/autoload_configs/conference.conf.xml";

      "xml_file_reload_only" slist => { 
        "dialplan/sipX_context.xml"
      };

      "xml_file" slist => { 
        "freeswitch.xml",
        "sip_profiles/sipX_profile.xml",
        "autoload_configs/xml_rpc.conf.xml",
         "autoload_configs/switch.conf.xml",
         "autoload_configs/logfile.conf.xml",
         "autoload_configs/local_stream.conf.xml"
      };

  files:
    !sipxconference::
      "$(conference_file)"
        delete => unlink,
        classes => if_repaired("reload_sipxfreeswitch"),
        action => track("$(this.promiser)");

    sipxconference::
      "$(conference_file)"
        create => "true",
        perms => m("644"),
        copy_from => copy_from_cfdata("$(sipx.location_id)/conference.conf.xml"),
        classes => if_repaired("reload_sipxfreeswitch"),
        action => track("$(this.promiser)");

    any::
      "$(sipx.SIPX_CONFDIR)/freeswitch/conf/$(xml_file)"
        create => "true",
        perms => m("644"),
        copy_from => copy_from_cfdata("$(sipx.location_id)/$(xml_file)"),
        classes => if_repaired("restart_sipxfreeswitch"),
        action => track("$(xml_file)");

    any::
      "$(sipx.SIPX_CONFDIR)/freeswitch/conf/$(xml_file_reload_only)"
        create => "true",
        perms => m("644"),
        copy_from => copy_from_cfdata("$(sipx.location_id)/$(xml_file_reload_only)"),
        classes => if_repaired("reload_sipxfreeswitch"),
        action => track("$(xml_file_reload_only)");

    any::
      "$(sipx.SIPX_CONFDIR)/freeswitch/conf/autoload_configs/modules.conf.xml"
        create => "true",
        perms => m("644"),
        edit_line => sipxfreeswitch_modules,
        classes => if_repaired("restart_sipxfreeswitch"),
        action => track("$(xml_file)");        
}

bundle edit_line sipxfreeswitch_modules {
  classes:
    "fs_g729" expression => fileexists("$(sipx.FREESWITCH_PREEFIX)/mod/mod_com_g729.so");

  insert_lines:

any::
"
<configuration name=\"modules.conf\" description=\"Modules\">
  <modules>
    <load module=\"mod_console\"/>
    <load module=\"mod_logfile\"/>
    <load module=\"mod_xml_rpc\"/> 
    <load module=\"mod_event_socket\"/>
    <load module=\"mod_erlang_event\"/>
    <load module=\"mod_portaudio\"/> 
    <load module=\"mod_sofia\"/>
    <load module=\"mod_loopback\"/>
    <load module=\"mod_commands\"/>
    <load module=\"mod_conference\"/>
    <load module=\"mod_dptools\"/>
    <load module=\"mod_expr\"/>
    <load module=\"mod_fifo\"/>
    <load module=\"mod_spandsp\"/>
    <load module=\"mod_limit\"/>
    <load module=\"mod_esf\"/>
    <load module=\"mod_fsv\"/>
    <load module=\"mod_valet_parking\"/>
    <load module=\"mod_dialplan_xml\"/>
    <load module=\"mod_voipcodecs\"/>
    <load module=\"mod_g723_1\"/>
";

fs_g729::
"
    <load module=\"mod_com_g729\"/>
";

!fs_g729::
"
    <load module=\"mod_g729\"/>
";

any::
"
    <load module=\"mod_amr\"/>
    <load module=\"mod_amrwb\"/>
    <load module=\"mod_ilbc\"/>
    <load module=\"mod_speex\"/>
    <load module=\"mod_h26x\"/>
    <load module=\"mod_siren\"/>
    <load module=\"mod_celt\"/> 
    <load module=\"mod_bv\"/> 
    <load module=\"mod_sndfile\"/>
    <load module=\"mod_native_file\"/>
    <load module=\"mod_local_stream\"/>
    <load module=\"mod_tone_stream\"/>
    <load module=\"mod_file_string\"/>
    <load module=\"mod_portaudio_stream\"/>
    <load module=\"mod_spidermonkey\"/>
    <load module=\"mod_lua\"/>
    <load module=\"mod_say_en\"/>
    <load module=\"mod_say_de\"/>
  </modules>
</configuration>
";

  delete_lines:
    ".*";
}

bundle agent sipxfreeswitch_setup {
  methods:
    !src.sipxfreeswitch::
      "any" usebundle => rh_chkconfig_status("sipxfreeswitch on");
    !src.!sipxfreeswitch::
      "any" usebundle => rh_chkconfig_status("sipxfreeswitch off");
}

bundle agent sipxfreeswitch_running {
  vars:
    any::
      "service_command" string => "$(sipx.FREESWITCH_PREFIX)/bin/freeswitch";

  methods:
    any::
      "any" usebundle => find_sipxservice_by_command("$(service_command)","sipxfreeswitch_running");

  commands:
    sipxfreeswitch_running.!sipxfreeswitch::
      "$(sipx.SIPX_SERVICEDIR)/sipxfreeswitch"
        args => "stop",
        action => track("sipxfreeswitch stop");

    !sipxfreeswitch_running.sipxfreeswitch::
      "$(sipx.SIPX_SERVICEDIR)/sipxfreeswitch"
        args => "start",
        action => track("sipxfreeswitch start");

    reload_sipxfreeswitch::
      "$(sipx.SIPX_SERVICEDIR)/sipxfreeswitch"
        args => "reload",
        action => track("sipxfreeswitch reload");

    restart_sipxfreeswitch::
      "$(sipx.SIPX_SERVICEDIR)/sipxfreeswitch"
        args => "restart",
        action => track("sipxfreeswitch restart");
}



