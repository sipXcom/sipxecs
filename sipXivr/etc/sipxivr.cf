# Copyright (C) 2012 eZuce Inc., certain elements licensed under a Contributor Agreement.
# Contributors retain copyright to elements licensed under a Contributor Agreement.
# Licensed to the User under the AGPL license.

#
# sipxivr configuration and process management
#
bundle agent sipxivr {
  methods:
    sipxivr::
      "any" usebundle => "sipxivr_config";
    any::
      "any" usebundle => "sipxivr_setup";
      "any" usebundle => "sipxivr_running";
}

bundle agent sipxivr_config {
  vars:    
    any::
      "xml_file" slist => { 
        "autoattendants.xml",
      };

  files:
    any::
      "$(sipx.SIPX_CONFDIR)/sipxivr.properties"
        create => "true",
        perms => m("644"),
	edit_line => sipxivr_properties_contents,
        classes => if_repaired("restart_sipxivr"),
	action => track("$(this.promiser)");

    any::
      "$(sipx.SIPX_CONFDIR)/$(xml_file)"
        create => "true",
        perms => m("644"),
	copy_from => copy_from_cfdata("$(sipx.location_id)/$(xml_file)"),
        classes => if_repaired("restart_sipxivr"),
	action => track("$(this.promiser)");
}

bundle edit_line sipxivr_properties_contents {
  insert_lines:
    any::
      "$(sipx.SIPX_CFDATA)/$(sipx.location_id)/sipxivr.properties.part"
        insert_type => "file";
      "ivr.sipxchangeDomainName=$(sipx.domain)";
      "ivr.realm=$(sipx.realm)";
      "log.file=$(sipx.SIPX_LOGDIR)/sipxivr.log";
      "ivr.dataDirectory=$(sipx.SIPX_IVRDATADIR)";
      "ivr.mailstoreDirectory=$(sipx.SIPX_IVRDATADIR)/mailstore";
      "ivr.promptsDirectory=$(sipx.SIPX_IVRDATADIR)/prompts";
      "ivr.scriptsDirectory=$(sipx.wwwdir)/doc/aa_vxml";
      "ivr.docDirectory=$(sipx.wwwdir)/doc";
      "ivr.organizationPrefs=$(sipx.SIPX_IVRDATADIR)/organizationprefs.xml";
      "ivr.binDirectory=$(sipx.SIPX_BINDIR)";
	  "ivr.backupPath=$(sipx.SIPX_VARDIR)/backup";
  delete_lines:
    any::
      ".*";
}


bundle agent sipxivr_setup {
  methods:
    !src.sipxivr::
      "any" usebundle => rh_chkconfig_status("sipxivr on");
    !src.!sipxivr::
      "any" usebundle => rh_chkconfig_status("sipxivr off");
}

bundle agent sipxivr_running {
  vars:
    any::
      "service_command" string => ".*\s-Dprocname=sipxivr\s.*";

  methods:
    any::
      "any" usebundle => find_sipxservice_by_command_regex("$(service_command)","sipxivr_running");

  commands:
    sipxivr_running.!sipxivr::
      "$(sipx.SIPX_SERVICEDIR)/sipxivr"
        args => "stop",
	action => track("sipxivr stop");

    !sipxivr_running.sipxivr::
      "$(sipx.SIPX_SERVICEDIR)/sipxivr"
        args => "start",
	action => track("sipxivr start");

    restart_sipxivr::
      "$(sipx.SIPX_SERVICEDIR)/sipxivr"
        args => "restart",
	action => track("sipxivr restart");
}



