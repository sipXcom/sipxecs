# Copyright (c) 2012 eZuce, Inc. All rights reserved.
# Contributed to SIPfoundry under a Contributor Agreement

# This software is free software; you can redistribute it and/or modify it under
# the terms of the Affero General Public License (AGPL) as published by the
# Free Software Foundation; either version 3 of the License, or (at your option)
# any later version.

# This software is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
# details.

#
# sipxivr configuration and process management
#
bundle agent sipxivr {
  methods:
    sipxivr::
      "any" usebundle => "sipxivr_config";
    any::
      "any" usebundle => "sipxivr_setup";
      "any" usebundle => "sipxivr_running";
}

bundle agent sipxivr_config {
  vars:
    any::
      "xml_file" slist => { 
        "autoattendants.xml",
      };

  files:
    any::
      "$(sipx.SIPX_CONFDIR)/sipxivr.properties"
        comment => "install sipxivr config $(this.promiser)",
        create => "true",
        perms => m("644"),
        edit_line => sipxivr_properties_contents,
        classes => if_repaired("restart_sipxivr");

    any::
      "$(sipx.SIPX_CONFDIR)/$(xml_file)"
        comment => "install sipxivr config $(this.promiser)",
        create => "true",
        perms => m("644"),
        copy_from => copy_from_cfdata("$(sipx.location_id)/$(xml_file)"),
        classes => if_repaired("restart_sipxivr");

    !primary::
      "$(sipx.SIPX_IVRDATADIR)/prompts"
        comment => "sync AA prompts",
        create => "true",
        perms => mog("644","$(sipx.SIPXPBXUSER)","$(sipx.SIPXPBXGROUP)"),
        copy_from => copy_prompts("$(sipx.master_address)","$(sipx.SIPX_IVRDATADIR)/prompts"),
        file_select => aa_prompt,
        depth_search => recurse("1");
}

bundle edit_line sipxivr_properties_contents {
  insert_lines:
    any::
      "$(sipx.SIPX_CFDATA)/$(sipx.location_id)/sipxivr.properties.part"
        insert_type => "file";
      "ivr.sipxchangeDomainName=$(sipx.domain)";
      "ivr.realm=$(sipx.realm)";
      "log.file=$(sipx.SIPX_LOGDIR)/sipxivr.log";
      "ivr.dataDirectory=$(sipx.SIPX_IVRDATADIR)";
      "ivr.identity=$(sipx.location_id)";
      "ivr.mailstoreDirectory=$(sipx.SIPX_IVRDATADIR)/mailstore";
      "ivr.promptsDirectory=$(sipx.SIPX_IVRDATADIR)/prompts";
      "ivr.scriptsDirectory=$(sipx.wwwdir)/doc/aa_vxml";
      "ivr.docDirectory=$(sipx.wwwdir)/doc";
      "ivr.organizationPrefs=$(sipx.SIPX_IVRDATADIR)/organizationprefs.xml";
      "ivr.binDirectory=$(sipx.SIPX_BINDIR)";
     "ivr.backupPath=$(sipx.SIPX_VARDIR)/backup";
  delete_lines:
    any::
      ".*";
}


bundle agent sipxivr_setup {
  methods:
    !src.sipxivr::
      "any" usebundle => rh_chkconfig_status("sipxivr on");
    !src.!sipxivr::
      "any" usebundle => rh_chkconfig_status("sipxivr off");
}

bundle agent sipxivr_running {
  vars:
    any::
      "service_command" string => ".*\s-Dprocname=sipxivr\s.*";

  methods:
    any::
      "any" usebundle => find_sipxservice_by_command_regex("$(service_command)","sipxivr_running");

  commands:
    (!sipxivr|stop_sipxecs).sipxivr_running::
      "$(sipx.SIPX_SERVICEDIR)/sipxivr"
        comment => "stop sipxivr",
        args => "stop";

    sipxivr.!sipxivr_running::
      "$(sipx.SIPX_SERVICEDIR)/sipxivr"
        comment => "start sipxivr",
        args => "start";

    sipxivr.sipxivr_running.(restart_sipxecs|restart_sipxivr)::
      "$(sipx.SIPX_SERVICEDIR)/sipxivr"
        comment => "restart sipxivr",
        args => "restart";
}

body copy_from copy_prompts(server,file) {
  servers => { "$(server)" };
  source => "$(file)";
  compare => "digest";
  trustkey => "true";
}

body file_select aa_prompt {
  leaf_name => {
    ".*\.wav"
  };
  file_result => "leaf_name";
}

