# Copyright (C) 2012 eZuce Inc., certain elements licensed under a Contributor Agreement.
# Contributors retain copyright to elements licensed under a Contributor Agreement.
# Licensed to the User under the AGPL license.

# Mongo configuration for sipXecs

bundle agent mongodb {
  methods:
    mongod::
      "any" usebundle => "mongodb_config";
    any::
      "any" usebundle => "mongodb_running";
      # at this moment, all setups get mongo client config
      "any" usebundle => "mongodb_client";
}

bundle agent mongodb_config {
  vars:
    any::
      # consider stunnel
       "server[replSet]" string => "sipxecs";
       "server[bind_ip]" string => "0.0.0.0";
       "server[port]" string => "27017";

  files:
    any::
      "/etc/mongod.conf"
        comment => "install mongo config $(this.promiser)",
        create => "false",
        perms => m("644"),
        edit_line => set_variable_values("mongodb_config.server"),
        classes => if_repaired("restart_mongodb");
}

bundle edit_line mongo_client_config {
  vars:
    "config" string => "$(sipx.SIPX_CFDATA)/$(sipx.location_id)/mongo-client.ini";

  classes:
    "has_config" expression => fileexists("$(config)");

  insert_lines:
    has_config::
      "$(config)"
        insert_type => "file";

    # should only be for very first run
    !has_config::
       "connectionUrl=mongodb://$(sipx.host).$(sipx.net_domain):27017/?slaveOk=true";
       "connectionString=sipxecs/$(sipx.host).$(sipx.net_domain):27017";

  delete_lines:
    ".*";
}

# not meant to replace monitoring service that will restart crashed mongo
# this just ensures it's running incase it was shutdown for some reason
bundle agent mongodb_running {
  vars:
    any::
      "service" string => "/etc/init.d/mongod";

  methods:
    any::
      "any" usebundle => find_service_by_command("$(service_command)", "mongodb_running","mongod");

  commands:
    !mongod.mongodb_running::
      "$(service)"
        comment => "stop mongo",
        args => "stop";

    mongod.!mongodb_running::
      "$(service)"
        comment => "start mongo",
        args => "start";

    mongod.mongodb_running.restart_mongodb::
      "$(service)"
        comment => "restart mongo",
        args => "restart";
}

# Not working at the momemnt.  Mongod is not creating a pid file
bundle agent mongodb_repair {
  files:
    any::
      "$(sipx.crontabs)/root"
        comment => "install cron to repair mongo on failure $(this.promiser)",
        create => "true",
        perms => m("0600"),
        edit_line => mongodb_auto_repair("$(this.promiser)");
}


# Once a minute, will check if mongod died and needs repair/restarting
# If mongod was stopped normally, this script leaves mongod stopped.
bundle edit_line mongodb_auto_repair(filename) {
  classes:
    "install_repairer" not => regline(".*$(sipx.SIPX_BINDIR)/mongodb-repair.*", "$(filename)");

  insert_lines:
    install_repairer::
      "* * * * * $(sipx.SIPX_BINDIR)/mongodb-repair";
}

bundle agent mongodb_client {
  files:
    any::
      # should not change often, we don't want to restart mongod unless
      # absolutely nec..  So sipXconfig should take care the client config
      # file it generates has the same checksum as the original or not generate
      # ini file in cfdata unless it's different.
      "$(sipx.SIPX_CONFDIR)/mongo-client.ini",
        comment => "install mongo client config $(this.promiser)",
        create => "true",
        perms => m("644"),
        edit_line => mongo_client_config,
        classes => if_repaired("mongodb_client_reconnect");
}
