# Copyright (c) 2012 eZuce, Inc. All rights reserved.
# Contributed to SIPfoundry under a Contributor Agreement

# This software is free software; you can redistribute it and/or modify it under
# the terms of the Affero General Public License (AGPL) as published by the
# Free Software Foundation; either version 3 of the License, or (at your option)
# any later version.

# This software is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
# details.

#
# sipXopenacd configuration and process management
#

bundle agent sipxopenacd {
  methods:
    sipxopenacd::
      "any" usebundle => "sipxopenacd_config";
    any::
      "any" usebundle => "sipxopenacd_running";
}

bundle agent sipxopenacd_config {
  files:
    # Those that install via git/tarball (i.e. developers) don't install code directly
    # into OpenACD dirs for 2 reasons
    #  1.) Hard to support 2 or more sipxecs installs on one machine.  Each system would
    #      have to ininstall the other version before it could run
    #  2.) make install shouldn't require root permissions and asking users to change
    #      permissions of OpenACD install dirs is awkward at best and in very
    #      bad taste.
    any::
      # symlink service script mostly so it can be used registered to system
      # when system starts in rh_chkconfig_status but also for user convienience
      "$(sipx.SIPX_SERVICEDIR)/openacd"
        comment => "install openacd config $(this.promiser)",
        perms => m("755"),
        link_from => ln_s("$(sipx.OPENACD_BINDIR)/openacd");

      "$(sipx.SIPX_LIBDIR)/openacd/plugin.d/sipxplugin.app"
        comment => "install openacd config $(this.promiser)",
        perms => m("755"),
        link_from => ln_s("$(sipx.SIPX_LIBDIR)/openacd/plugin.d/sipxplugin/ebin/sipxplugin.app");

      "$(sipx.SIPX_LIBDIR)/openacd/plugin.d/erlmongo.app"
        comment => "install openacd config $(this.promiser)",
        perms => m("755"),
        link_from => ln_s("$(sipx.SIPX_LIBDIR)/openacd/lib/erlmongo/ebin/erlmongo.app");

      # regular configs
      "$(sipx.OPENACD_CONFDIR)/vm.args"
        comment => "install openacd config $(this.promiser)",
        create => "true",
        perms => m("644"),
        edit_line => sipxopenacd_vm_args;

      "$(sipx.OPENACD_CONFDIR)/app.config"
        comment => "install openacd config $(this.promiser)",
        create => "true",
        perms => m("644"),
        edit_line => sipxopenacd_app_config;

    # Here we simply inform openacd startup to include our code when it starts up. (view above comment)
      "$(sipx.OPENACD_CONFDIR)/sysopenacd"
        create => "true",
        perms => m("644"),
        edit_defaults => empty,
        # NOTE: as long as $(OAPLUGINDIR) is *not* a defined cfengine var
        # it should pass thru unreplaced.
        edit_line => insert_lines("OAPLUGINDIR=$OAPLUGINDIR:$(sipx.SIPX_LIBDIR)/openacd/plugin.d:$(sipx.SIPX_LIBDIR)/openacd/lib");
}

bundle edit_line sipxopenacd_vm_args() {
  insert_lines:
    any::
"
## Name of the node
-name openacd@$(sys.fqhost)

## Cookie for distributed erlang
-setcookie ClueCon

## Heartbeat management; auto-restarts VM if it dies or becomes unresponsive
## (Disabled by default..use with caution!)
##-heart

## Enable kernel poll and a few async threads
+K true
+A 5

## Increase number of concurrent ports/sockets
-env ERL_MAX_PORTS 4096

-mnesia dir '\"$(sipx.OPENACD_DBDIR)/Mnesia.openacd@$(sys.fqhost)\"'

## Tweak GC to run more often
-env ERL_FULLSWEEP_AFTER 10"
;

  delete_lines:
    any::
      ".*";
}

bundle edit_line sipxopenacd_app_config() {
  insert_lines:
    any::
"
[{'OpenACD', [
	{console_loglevel, $(sipx.OPENACD_LOG_LEVEL)},
	{logfiles, [{\"$(sipx.OPENACD_LOGDIR)/full.log\", $(sipx.OPENACD_LOG_LEVEL)}]},
	{plugin_dir, \"$(sipx.SIPX_LIBDIR)/openacd/plugin.d\"}, {plugins, [erlmongo, sipxplugin]}, {agent_auth_storage, spx_agent_auth}, {call_queue_config_storage, spx_call_queue_config}
]},
{sasl, [
	{errlog_type, error} % disable SASL progress reports
]}]."
;

  delete_lines:
    any::
      ".*";
}

bundle agent sipxopenacd_running {
  vars:
    any::
      "service_command" string => ".*\s(/?)/bin/openacd\s.*";

  classes:
    any::
      "has_service_script" expression => fileexists("$(sipx.SIPX_SERVICEDIR)/openacd");

  methods:
    any::
      "any" usebundle => find_service_by_command("$(service_command)","sipxopenacd_running","root");
    !src.sipxopenacd.has_service_script::
      "any" usebundle => rh_chkconfig_status("openacd on");
    !src.!sipxopenacd.has_service_script::
      "any" usebundle => rh_chkconfig_status("openacd off");

  commands:
    (!sipxopenacd|stop_sipxecs).sipxopenacd_running::
      "$(sipx.SIPX_SERVICEDIR)/openacd"
        comment => "stop openacd",
        args => "stop";

    sipxopenacd.!sipxopenacd_running::
      "$(sipx.SIPX_SERVICEDIR)/openacd"
        comment => "start openacd",
        args => "start";

    sipxopenacd.sipxopenacd_running.(restart_sipxecs|restart_sipxopenacd)::
      "$(sipx.SIPX_SERVICEDIR)/openacd"
        comment => "restart openacd",
        args => "restart";
}
