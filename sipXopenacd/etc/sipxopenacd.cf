# Copyright (C) 2012 eZuce Inc., certain elements licensed under a Contributor Agreement.
# Contributors retain copyright to elements licensed under a Contributor Agreement.
# Licensed to the User under the AGPL license.

#
# sipXopenacd configuration and process management
#

bundle agent sipxopenacd {
  methods:
    sipxopenacd::
      "any" usebundle => "sipxopenacd_config";
    any::
      "any" usebundle => "sipxopenacd_setup";
      "any" usebundle => "sipxopenacd_running";
}

bundle agent sipxopenacd_config {
  files:
    any::
      "$(sipx.OPENACD_HOME)/etc/vm.args"
        comment => "install openacd config $(this.promiser)",
        create => "true",
        perms => m("644"),
        edit_line => sipxopenacd_vm_args;

    any::
      "$(sipx.OPENACD_HOME)/etc/app.config"
        comment => "install openacd config $(this.promiser)",
        create => "true",
        perms => m("644"),
        copy_from => copy_from_cfdata("$(sipx.location_id)/app.config");
}

bundle edit_line sipxopenacd_vm_args() {
  insert_lines:
    any::
"
## Name of the node
-name openacd@$(sys.fqhost)

## Cookie for distributed erlang
-setcookie ClueCon

## Heartbeat management; auto-restarts VM if it dies or becomes unresponsive
## (Disabled by default..use with caution!)
##-heart

## Enable kernel poll and a few async threads
+K true
+A 5

## Increase number of concurrent ports/sockets
-env ERL_MAX_PORTS 4096

-mnesia dir '\"$(sipx.OPENACD_HOME)/run/Mnesia.openacd@$(sys.fqhost)\"'

## Tweak GC to run more often
-env ERL_FULLSWEEP_AFTER 10
";

  delete_lines:
    any::
      ".*";
}

bundle agent sipxopenacd_setup {
  methods:
    !src.sipxopenacd::
      "any" usebundle => rh_chkconfig_status("sipxopenacd on");
    !src.!sipxopenacd::
      "any" usebundle => rh_chkconfig_status("sipxopenacd off");
}

bundle agent sipxopenacd_running {
  vars:
    any::
      "service_command" string => ".*\s$(sipx.OPENACD_HOME)/bin/openacd\s.*";

  methods:
    any::
      "any" usebundle => find_sipxservice_by_command_regex("$(service_command)","sipxopenacd_running");

  commands:
    !sipxopenacd.sipxopenacd_running::
      "$(sipx.SIPX_SERVICEDIR)/sipxopenacd"
        comment => "stop sipxopenacd",
        args => "stop";

    sipxopenacd.!sipxopenacd_running::
      "$(sipx.SIPX_SERVICEDIR)/sipxopenacd"
        comment => "start sipxopenacd",
        args => "start";

    sipxopenacd.sipxopenacd_running.(restart_sipxecs|restart_sipxopenacd)::
      "$(sipx.SIPX_SERVICEDIR)/sipxopenacd"
        comment => "restart sipxopenacd",
        args => "restart";
}
