#!/bin/bash

# sipxopenfire - Startup script for sipxopenfire

# chkconfig: 35 85 15
# description: sipxopenfire is an administration server
# processname: java

. /etc/rc.d/init.d/functions || exit 1
. @SIPX_LIBEXECDIR@/sipx-utils.sh || exit 1

# Copyright (c) 2012 eZuce, Inc. All rights reserved.
# Contributed to SIPfoundry under a Contributor Agreement

# This software is free software; you can redistribute it and/or modify it under
# the terms of the Affero General Public License (AGPL) as published by the
# Free Software Foundation; either version 3 of the License, or (at your option)
# any later version.

# This software is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
# details.

usage() {
cat <<USAGE
Usage: sipxopenfire [start|stop|configtest|status|db commands ...]

Start Web UI administration for sipXpbx and for remotely provisioned
SIP-based phones.

Options include:

  none                 Runs web admin ui

  stop                 Stop web admin ui

  status               Checks if process is running

  db commands ...      Runs an operation on the database. Database commands
                       are detailed below

  configtest           Run diagnostics


Common Database commands include:

   drop                Drops ${Database} database

   create              Create new ${Database} database

   upgrade             Upgrade database from a previous version by applying
                       patches to the database schema.  This will only
                       upgrade if nec.

   reset-superadmin    Clear the password of the superadmin user.
                       This lets you log in if you've forgotten the superadmin
                       password.  But for security, you should immediately log
                       in and set superadmin's password.

USAGE
}

Status=0
JAVACMD=`@bindir@/sipx-config --java`
OPENFIRE_HOME="@OPENFIRE_HOME@"
OPENFIRE_LIB="${OPENFIRE_HOME}/lib"
OPENFIRE_PLUGINS="${OPENFIRE_HOME}/plugins"
Dependencies=`@SIPX_BINDIR@/java-dep -d @SIPX_JAVADIR@/sipXcommons @plugin_PKGS@`
export CLASSPATH=`echo ${OPENFIRE_LIB}/*.jar @SIPX_JAVADIR@/sipXopenfire/*.jar ${Dependencies} | sed -e 's/ /:/g'`
CONFIG_FILES="@SIPX_CONFDIR@/sipxopenfire.xml"
SIPX_COMMONS=@SIPX_JAVADIR@/sipXcommons
SIPX_OPENFIRE_DIR=@SIPX_JAVADIR@/sipXopenfire
SIP_DOMAIN_NAME=`sipx_config_value @SIPX_CONFDIR@/domain-config SIP_DOMAIN_NAME`
FQDN=`hostname -f`
TMP_DIR="/tmp"
# Export any necessary variables
export JAVA_HOME JAVACMD
PidFile="@SIPX_RUNDIR@/sipxopenfire.pid"

. /etc/rc.d/init.d/functions || exit 1
. @SIPX_LIBEXECDIR@/sipx-utils.sh
[ -e @SIPX_CONFDIR@/sipxopenfirerc ] && . @SIPX_CONFDIR@/sipxopenfirerc

# Turn control over to ant to run database command
databaseCommand() {
  databaseCheck
  
  # XCF-1275 - Do not want to suppress output if there is an error
  # however want to be quiet if everything is ok for clean rpm install
  # output
  # ant.library.dir needs to be set - but should not point to any jars
  CmdOut=`$JAVACMD \
      -Dant.library.dir=${TMP_DIR} \
      -Dsipxopenfire.db.user=postgres \
      org.apache.tools.ant.launch.Launcher \
      -f @SIPX_CONFDIR@/sipxopenfire-database.xml \
      $@`

  if [ $? != "0" ]; then
     echo "$CmdOut" | grep -v '^Unable to locate tools\.jar' >&2
  fi  
}

# Run Web interface
start() {
  setupCheck

  # Set the openfire debug level based on the sipxopenfire log level
  SIPXOPENFIRE_LOGLEVEL=`grep "<log-level>.*<.log-level>" $CONFIG_FILES | cut -f2 -d">" | cut -f1 -d"<"`
  if [ $SIPXOPENFIRE_LOGLEVEL == "DEBUG" ]
  then
    sed -e "s/<enabled>.*<\/enabled>/<enabled>true<\/enabled>/g" "@SIPX_JAVADIR@/sipXopenfire/conf/openfire.xml" > ${OPENFIRE_HOME}/conf/openfire.xml 
  else
    sed -e "s/<enabled>.*<\/enabled>/<enabled>false<\/enabled>/g" "@SIPX_JAVADIR@/sipXopenfire/conf/openfire.xml" > ${OPENFIRE_HOME}/conf/openfire.xml      
  fi
  # make it writable for openfire
  chown -R @SIPXPBXUSER@:@SIPXPBXUSER@ @OPENFIRE_HOME@/conf 2> /dev/null
  databaseCommand use-openfire-xml
  if [ -n "${NoFork}" ] ; then
    runuser - @SIPXPBXUSER@ ${OPENFIRE_HOME}/bin/openfire start
  else
    echo -n $"Starting sipxopenfire: "
    runuser - @SIPXPBXUSER@ ${OPENFIRE_HOME}/bin/openfire start >/dev/null 2>&1 &
    Status=$?
    echo_success
  fi
}

# Return false if postgres is
#  1. not running
#  2. running but not setup to communicate w/java or psql command
#  3. Database is not created
databaseCheck() {
    psql --list --field-separator , --no-align --username @POSTGRESQL_USER@ \
    | cut -d , -f 1 \
    | grep "openfire"$ > /dev/null 2>&1
}

setupCheck() {
  configure
  if ! databaseCheck
  then
    echo "Initializing openfire database..."
      setupDatabase
    # more to do here, see sipxopenacd setup
  fi
}

# simple diagnostics
configtest() {
  echo "sipxopenfire configtest"
  for f in $CONFIG_FILES; do
      if ! test -f $f; then
  	echo "Missing config file $f" >&2
  	Status=1
      fi
  done
}

stop() {
  echo -n $"Stopping sipxopenfire: "
  runuser - @SIPXPBXUSER@ ${OPENFIRE_HOME}/bin/openfire stop
  Status=$?
  if [ $Status -eq 0 ]; then
    echo_success
  else
    echo_failure
  fi
  echo
}

restart() {
  stop
  sleep 1
  start
}

# NOTE: setup script was ported from openfire and sipxecs initial integration, but
# it's not entirely clear what steps are absolutely nec. or done just because it
# was either once necessary or someone that it was harmless.  For example, it's not 
# typical to recursively chown directories each time on startup, but it's possible
# there is a good reason to do this under some special circumstances. --douglas

# configure openfire - create necessary symbolic links, this should happen once, during build time
# and should happen independent of openfire database creation
configure() {
 if [ -e @OPENFIRE_HOME@  ]
 then
   chown -R @SIPXPBXUSER@ @OPENFIRE_HOME@ 2> /dev/null
   chgrp -R @SIPXPBXUSER@ @OPENFIRE_HOME@ 2> /dev/null
   chmod -R u+rwX,ga+rX   @OPENFIRE_HOME@ 2> /dev/null

   rm  -f @OPENFIRE_HOME@/resources/security/truststore 2> /dev/null
   rm  -f @OPENFIRE_HOME@/resources/security/keystore 2> /dev/null
   ln -s @SIPX_CONFDIR@/ssl/authorities.jks  @OPENFIRE_HOME@/resources/security/truststore 2> /dev/null
   ln -s @SIPX_CONFDIR@/ssl/ssl.keystore  @OPENFIRE_HOME@/resources/security/keystore 2> /dev/null   

   # Remove all softlinks under @OPENFIRE_HOME@/plugins
   find ${OPENFIRE_PLUGINS} -maxdepth 1 -type l -print0 2> /dev/null | xargs -0 rm -f 2> /dev/null
   
   # Deploy sipxecs plugins (plugins directory)
   find ${SIPX_OPENFIRE_DIR}/plugins -name "*.jar" | while read PLUGIN_FILE_PATH; do
   	   PLUGIN_FILE_NAME=$(basename ${PLUGIN_FILE_PATH} .jar)
   	   rm -rf ${OPENFIRE_PLUGINS}/${PLUGIN_FILE_NAME} 2> /dev/null       	
       ln -s ${PLUGIN_FILE_PATH} ${OPENFIRE_PLUGINS} 2> /dev/null	
   done 

   # Remove all softlinks under @OPENFIRE_HOME@/lib
   find ${OPENFIRE_LIB} -maxdepth 1 -type l -print0 2> /dev/null | xargs -0 rm -f 2> /dev/null

   # Deploy sipxecs openfire jars in openfire classpath (lib directory)
   find ${SIPX_OPENFIRE_DIR}/lib -name "*.jar" | while read LIB_FILE_PATH; do	
       ln -s ${LIB_FILE_PATH} ${OPENFIRE_LIB} 2> /dev/null	
   done   
   
   #Deploy sipxcommons needed jars in openfire classpath (lib directory)
   for f in sipxcommons ws-commons-util xmlrpc-client sipxsqaclient xmlrpc-server xmlrpc-common log4j mongo commons-logging commons-digester commons-collections commons-beanutils-core jain-sip-sdp dnsjava dom4j commons-io not-yet-commons-ssl; do
       ln -snf ${SIPX_COMMONS}/$f*.jar ${OPENFIRE_LIB}/$f.jar
   done
   
   chown -R @SIPXPBXUSER@ @OPENFIRE_LIB@ 2> /dev/null
   chgrp -R @SIPXPBXUSER@ @OPENFIRE_LIB@ 2> /dev/null
   rm -f @OPENFIRE_HOME@/extras/sipXecs/lib 2> /dev/null
   mkdir -p @OPENFIRE_HOME@/extras/sipXecs/lib 2> /dev/null   

   # If the openfire configuration directory is either a soft link or does not exist, then
   # create a regular directory and copy the duplicate configuration file managed by sipXecs.
   # Removing the soft link solves an inter-package file dependency with file openfire.xml.  
   if [ -h @OPENFIRE_HOME@/conf ] || [ ! -e @OPENFIRE_HOME@/conf ]
   then
      chown -R @SIPXPBXUSER@:@SIPXPBXUSER@ @OPENFIRE_HOME@/conf 2> /dev/null
   fi

   mkdir -p @SIPX_LOGDIR@/openfire 2> /dev/null
   chown -R @SIPXPBXUSER@ @SIPX_LOGDIR@/openfire 2> /dev/null
   rm -rf @OPENFIRE_HOME@/logs/ 2> /dev/null
   ln -s @SIPX_LOGDIR@/openfire/ @OPENFIRE_HOME@/logs 2> /dev/null
   mkdir @OPENFIRE_HOME@/audit/ 2> /dev/null
   chown @SIPXPBXUSER@ @OPENFIRE_HOME@/audit/ 2> /dev/null
  fi 
}

setupDatabase() {
  # Check if we have created the database. If not create it.
  rm  @SIPX_TMPDIR@/sipxopenfire.version 2> /dev/null
  databaseCommand check 2> /dev/null
  if [ ! -f @SIPX_TMPDIR@/sipxopenfire.version ]  
  then
    databaseCommand create 2> /dev/null
    databaseCommand create-tables 2> /dev/null
    databaseCommand setup -Ddomain=${SIP_DOMAIN_NAME} -Dfqdn=${FQDN} 2> /dev/null
  else
    databaseCommand setdomain -Ddomain=${SIP_DOMAIN_NAME} 2> /dev/null
    databaseCommand setfqdn -Dfqdn=${FQDN} 2> /dev/null
  fi

  #if openfire service is running stop it.
  sudo /sbin/service openfire stop 2> /dev/null
}

case "$1" in
  nofork)
    NoFork=1
    start
    ;;
  configure)
    configure
    ;;
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart|reload|force-reload)
    restart
    ;;
  condrestart)
    [ -f ${PidFile} ] && restart || :
    ;;
  status)
    runuser - @SIPXPBXUSER@ ${OPENFIRE_HOME}/bin/openfire status
    Status=$?
    ;;
  configtest)
    configtest
    ;;
  db)
    shift
    setupCheck
    databaseCommand ${@}
    ;;
  *)
    echo "Usage: $0 {start|stop|status|restart|reload|force-reload|condrestart|configure}"
    Status=1
esac

exit $Status


