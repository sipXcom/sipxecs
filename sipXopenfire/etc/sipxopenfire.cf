# Copyright (C) 2012 eZuce Inc., certain elements licensed under a Contributor Agreement.
# Contributors retain copyright to elements licensed under a Contributor Agreement.
# Licensed to the User under the AGPL license.

#
# sipxopenfire configuration and process management
#
bundle agent sipxopenfire {
  methods:
    sipxopenfire::
      "any" usebundle => "sipxopenfire_config";
    any::
      "any" usebundle => "sipxopenfire_setup";
      "any" usebundle => "sipxopenfire_running";
}

bundle agent sipxopenfire_config {
  vars:    
    any::
      "xml_file_restart" slist => { 
        "sipxopenfire.xml"
      };

    any::
      "xml_file_norestart" slist => { 
        "xmpp-account-info.xml",
      };

  files:
    any::
      "$(sipx.SIPX_JAVADIR)/sipXopenfire/conf/openfire.xml"
        create => "true",
        perms => m("644"),
	copy_from => copy_from_cfdata("$(sipx.location_id)/openfire.xml"),
        classes => if_repaired("restart_sipxopenfire"),
	action => track("$(this.promiser)");

    any::
      # Write out the config information so the plugin can read it.
      "/tmp/sipx.properties"
        create => "true",
        perms => m("644"),
	edit_line => sipxopenfire_sipx_properties,
        classes => if_repaired("restart_sipxopenfire"),
	action => track("$(this.promiser)");

    any::
      "$(sipx.SIPX_CONFDIR)/$(xml_file_restart)"
        create => "true",
        perms => m("644"),
	copy_from => copy_from_cfdata("$(sipx.location_id)/$(xml_file_restart)"),
        classes => if_repaired("restart_sipxopenfire"),
	action => track("$(this.promiser)");

    any::
      "$(sipx.SIPX_CONFDIR)/$(xml_file_norestart)"
        create => "true",
        perms => m("644"),
	copy_from => copy_from_cfdata("$(sipx.location_id)/$(xml_file_norestart)"),
	action => track("$(this.promiser)");
}

bundle edit_line sipxopenfire_sipx_properties {
  insert_lines:
    "conf.dir=$(sipx.SIPX_CONFDIR)";
    "localization.file=$(sipx.SIPX_CONFDIR)/openfire/sipxopenfire-prompts.properties";
    "openfire.home=$(sipx.OPENFIRE_HOME)";

  delete_lines:
    ".*";
}

bundle agent sipxopenfire_setup {
  methods:
    !src.sipxopenfire::
      "any" usebundle => rh_chkconfig_status("sipxopenfire on");
    !src.!sipxopenfire::
      "any" usebundle => rh_chkconfig_status("sipxopenfire off");
}

bundle agent sipxopenfire_running {
  vars:
    any::
      "service_command" string => ".*\s-Dcom.sun.management.jmxremote.port=23458\s.*";

  methods:
    any::
      "any" usebundle => find_sipxservice_by_command_regex("$(service_command)","sipxopenfire_running");

  commands:
    sipxopenfire_running.!sipxopenfire::
      "$(sipx.SIPX_SERVICEDIR)/sipxopenfire"
        args => "stop",
	action => track("sipxopenfire stop");

    !sipxopenfire_running.sipxopenfire::
      "$(sipx.SIPX_SERVICEDIR)/sipxopenfire"
        args => "start",
	action => track("sipxopenfire start");

    restart_sipxopenfire::
      "$(sipx.SIPX_SERVICEDIR)/sipxopenfire"
        args => "restart",
	action => track("sipxopenfire restart");
}



