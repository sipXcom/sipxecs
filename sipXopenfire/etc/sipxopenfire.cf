# Copyright (c) 2012 eZuce, Inc. All rights reserved.
# Contributed to SIPfoundry under a Contributor Agreement

# This software is free software; you can redistribute it and/or modify it under
# the terms of the Affero General Public License (AGPL) as published by the
# Free Software Foundation; either version 3 of the License, or (at your option)
# any later version.

# This software is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
# details.

#
# sipxopenfire configuration and process management
#
bundle agent sipxopenfire {
  methods:
    sipxopenfire::
      "any" usebundle => "sipxopenfire_config";
    any::
      "any" usebundle => "sipxopenfire_setup";
      "any" usebundle => "sipxopenfire_running";
}

bundle agent sipxopenfire_config {
  vars:
    !ofconsole::
      "web_file" string => "$(sipx.SIPX_JAVADIR)/sipXopenfire/conf/web.xml.disable_openfire_admin_console";
    ofconsole::
      "web_file" string => "$(sipx.SIPX_JAVADIR)/sipXopenfire/conf/web.xml.enable_openfire_admin_console";
    any::
      "xml_file_restart" slist => { 
        "sipxopenfire.xml",
        "multipleldap-openfire.xml"
      };

    any::
      "xml_file_norestart" slist => { 
        "xmpp-account-info.xml",
      };

  files:
    any::
      "$(sipx.SIPX_JAVADIR)/sipXopenfire/conf/openfire.xml"
        comment => "install openfire config $(this.promiser)",
        create => "true",
        perms => m("644"),
        copy_from => copy_from_cfdata("$(sipx.location_id)/openfire.xml"),
        classes => if_repaired("restart_sipxopenfire");              

     any::
      "$(sipx.OPENFIRE_HOME)/plugins/admin/webapp/WEB-INF/web.xml"
        comment => "modify openfire console props",
        create => "true",
        perms => m("644"),
        copy_from => copy_from_ofdir("$(web_file)"),
        classes => if_repaired("restart_sipxopenfire");

    any::
      # Write out the config information so the plugin can read it.
      "/tmp/sipx.properties"
        comment => "install openfire config $(this.promiser)",
        create => "true",
        perms => m("644"),
        edit_line => sipxopenfire_sipx_properties,
        classes => if_repaired("restart_sipxopenfire");

    any::
      "$(sipx.SIPX_CONFDIR)/$(xml_file_restart)"
        comment => "install openfire config $(this.promiser)",
        create => "true",
        perms => m("644"),
        copy_from => copy_from_cfdata("$(sipx.location_id)/$(xml_file_restart)"),
        classes => if_repaired("restart_sipxopenfire");

    any::
      "$(sipx.SIPX_CONFDIR)/$(xml_file_norestart)"
        comment => "install openfire config $(this.promiser)",
        create => "true",
        perms => m("644"),
        copy_from => copy_from_cfdata("$(sipx.location_id)/$(xml_file_norestart)");
}

bundle edit_line sipxopenfire_sipx_properties {
  insert_lines:	
  any::
    "$(sipx.SIPX_CFDATA)/$(sipx.location_id)/sipx.properties.part"
      insert_type => "file";	
    "conf.dir=$(sipx.SIPX_CONFDIR)";
    "lib.dir=$(sipx.SIPX_LIBDIR)";
    "localization.file=$(sipx.SIPX_CONFDIR)/openfire/sipxopenfire-prompts.properties";
    "openfire.home=$(sipx.OPENFIRE_HOME)";

  delete_lines:
    ".*";
}

bundle agent sipxopenfire_setup {
  methods:
    !src.sipxopenfire::
      "any" usebundle => rh_chkconfig_status("sipxopenfire on");
    !src.!sipxopenfire::
      "any" usebundle => rh_chkconfig_status("sipxopenfire off");
}

bundle agent sipxopenfire_running {
  vars:
    any::
      "service_command" string => ".*\s-Dexe4j.moduleName=$(sipx.OPENFIRE_HOME)/bin/openfire\s.*";

  methods:
    any::
      "any" usebundle => find_sipxservice_by_command_regex("$(service_command)","sipxopenfire_running");

  commands:
    (!sipxopenfire|stop_sipxecs).sipxopenfire_running::
      "$(sipx.SIPX_SERVICEDIR)/sipxopenfire"
        comment => "stop sipxopenfire",
        args => "stop";

    sipxopenfire.!sipxopenfire_running::
      "$(sipx.SIPX_SERVICEDIR)/sipxopenfire"
        comment => "start sipxopenfire",
        args => "start";

    sipxopenfire.sipxopenfire_running.(restart_sipxecs|restart_sipxopenfire)::
      "$(sipx.SIPX_SERVICEDIR)/sipxopenfire"
        comment => "restart sipxopenfire",
        args => "restart";
}

body copy_from copy_from_ofdir(filename) {
  source => "$(filename)";
  compare => "digest";
  purge => "true";
}

