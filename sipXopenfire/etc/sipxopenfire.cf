# Copyright (C) 2012 eZuce Inc., certain elements licensed under a Contributor Agreement.
# Contributors retain copyright to elements licensed under a Contributor Agreement.
# Licensed to the User under the AGPL license.

#
# sipxopenfire configuration and process management
#
bundle agent sipxopenfire {
  methods:
    sipxopenfire::
      "any" usebundle => "sipxopenfire_config";
      "any" usebundle => "sipxopenfire_setup";
    any::
      "any" usebundle => "sipxopenfire_running";
}

bundle agent sipxopenfire_config {
  vars:    
    any::
      "xml_file" slist => { 
        "autoattendants.xml",
      };

  files:
    any::
      "$(sipx.OPENFIRE_HOME)/conf/openfire.xml"
        create => "true",
        perms => m("644"),
	edit_line => sipxopenfire_properties_contents,
        classes => if_repaired("restart_sipxopenfire"),
	action => track("$(this.promiser)");

    any::
      # Write out the config information so the plugin can read it.
      "/tmp/sipx.properties"
        create => "true",
        perms => m("644"),
	copy_from => sipxopenfire_sipx_properties,
        classes => if_repaired("restart_sipxopenfire"),
	action => track("$(this.promiser)");
}

bundle edit_line sipxopenfire_sipx_properties {
  insert_lines:
    "conf.dir=$(sipx.SIPX_CONFDIR)";
    "localization.file=$(sipx.SIPX_CONFDIR)/openfire/sipxopenfire-prompts.properties";
    "openfire.home=$(sipx.OPENFIRE_HOME)";

  delete_lines:
    ".*";
}


bundle edit_line sipxopenfire_properties_contents {
  vars
    openfire_debug::
      "debug" string => "true";

    !openfire_debug::
      "debug" string => "false";

    openfire_admin::
      "port" string => "9094";
      "secure_port" string => "9095";

    !openfire_admin::
      "port" string => "-1";
      "secure_port" string => "-1";

  insert_lines:
    any::"
<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<jive>
  <adminConsole>
    <port>$(port)</port>
    <securePort>$(secure_port)</securePort>
  </adminConsole>
  <admin>
    <authorizedUsernames>admin, superadmin</authorizedUsernames>
  </admin>
  <provider>
    <admin>
      <className>org.jivesoftware.openfire.admin.DefaultAdminProvider</className>
    </admin>
    <auth></auth>
    <group></group>
    <user></user>
    <lockout></lockout>
    <securityAudit>
      <className>org.jivesoftware.openfire.security.DefaultSecurityAuditProvider</className>
    </securityAudit>
    <vcard></vcard>
  </provider>
  <connectionProvider>
    <className>org.jivesoftware.database.DefaultConnectionProvider</className>
  </connectionProvider>
  <database>
    <defaultProvider>
      <driver>org.postgresql.Driver</driver>
      <serverURL>jdbc:postgresql://localhost:5432/openfire</serverURL>
      <username>postgres</username>
      <password>postgres</password>
    </defaultProvider>
  </database>
  <setup>true</setup>
  <log>
    <debug>
      <enabled>$(debug)</enabled>
    </debug>
  </log>
</jive>"

  delete_lines:
    any::
      ".*";
}


bundle agent sipxopenfire_setup {
  methods:
    !src.sipxopenfire::
      "any" usebundle => rh_chkconfig_status("sipxopenfire");
}

bundle agent sipxopenfire_running {
  vars:
    any::
      "service_command" string => ".*\s-Dprocname=sipxopenfire\s.*";

  methods:
    any::
      "any" usebundle => find_sipxservice_by_command_regex("$(service_command)","sipxopenfire_running");

  commands:
    sipxopenfire_running.!sipxopenfire::
      "$(sipx.SIPX_SERVICEDIR)/sipxopenfire"
        args => "stop",
	action => track("sipxopenfire stop");

    !sipxopenfire_running.sipxopenfire::
      "$(sipx.SIPX_SERVICEDIR)/sipxopenfire"
        args => "start",
	action => track("sipxopenfire start");

    restart_sipxopenfire::
      "$(sipx.SIPX_SERVICEDIR)/sipxopenfire"
        args => "restart",
	action => track("sipxopenfire restart");
}



