# Copyright (c) 2012 eZuce, Inc. All rights reserved.
# Contributed to SIPfoundry under a Contributor Agreement

# This software is free software; you can redistribute it and/or modify it under
# the terms of the Affero General Public License (AGPL) as published by the
# Free Software Foundation; either version 3 of the License, or (at your option)
# any later version.

# This software is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
# details.

#
# sipXpage configuration and process management
#
bundle agent sipxpage {
  methods:
    sipxpage::
      "any" usebundle => "sipxpage_config";
    any::
      "any" usebundle => "sipxpage_setup";
      "any" usebundle => "sipxpage_running";
}

bundle agent sipxpage_config {
  files:
    any::
      "$(sipx.SIPX_CONFDIR)/sipxpage.properties"
        comment => "install paging config $(this.promiser)",
        create => "true",
        perms => m("644"),
        edit_line => sipxpage_properties,
        classes => if_repaired("restart_sipxpage");

    !primary::
      "$(sipx.SIPX_VARDIR)/sipxpage/music"
        comment => "sync Page Server prompts",
        create => "true",
        perms => mog("644","$(sipx.SIPXPBXUSER)","$(sipx.SIPXPBXGROUP)"),
        copy_from => copy_prompts("$(sipx.master_address)","$(sipx.SIPX_VARDIR)/sipxpage/music"),
        file_select => wav_prompt,
        depth_search => recurse("1");
}

bundle edit_line sipxpage_properties {
  insert_lines:
    any::
      "$(sipx.SIPX_CFDATA)/$(sipx.location_id)/sipxpage.properties.part"
        insert_type => "file";
      "log.file : $(sipx.SIPX_LOGDIR)/sipxpage.log";

  delete_lines:
    any::
      ".*";
}

bundle agent sipxpage_setup {
  methods:
    !src.sipxpage::
      "any" usebundle => rh_chkconfig_status("sipxpage on");
    !src.!sipxpage::
      "any" usebundle => rh_chkconfig_status("sipxpage off");
}

bundle agent sipxpage_running {
  vars:
    any::
      "service_command" string => ".*\s-Dprocname=sipxpage\s.*";

  methods:
    any::
      "any" usebundle => find_sipxservice_by_command("$(service_command)","sipxpage_running");

  commands:
    (!sipxpage|stop_sipxecs).sipxpage_running::
      "$(sipx.SIPX_SERVICEDIR)/sipxpage"
        comment => "stop sipxpage",
        args => "stop";

    sipxpage.!sipxpage_running.!stop_sipxecs::
      "$(sipx.SIPX_SERVICEDIR)/sipxpage"
        comment => "start sipxpage",
        args => "start";

    sipxpage.sipxpage_running.(restart_sipxpage|restart_sipxecs)::
      "$(sipx.SIPX_SERVICEDIR)/sipxpage"
        comment => "restart sipxpage",
        args => "restart";
}
