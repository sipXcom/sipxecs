# Copyright (c) 2012 eZuce, Inc. All rights reserved.
# Contributed to SIPfoundry under a Contributor Agreement

# This software is free software; you can redistribute it and/or modify it under
# the terms of the Affero General Public License (AGPL) as published by the
# Free Software Foundation; either version 3 of the License, or (at your option)
# any later version.

# This software is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
# details.

#
# sipXpark configuration and process management
#
bundle agent sipxpark {
  methods:
    sipxpark::
      "any" usebundle => "sipxpark_config";
    any::
      "any" usebundle => "sipxpark_setup";
      "any" usebundle => "sipxpark_running";
}

bundle agent sipxpark_config {
  files:
    any::
      "$(sipx.SIPX_CONFDIR)/sipxpark-config"
        comment => "install sipxpark config $(this.promiser)",
        create => "true",
        perms => m("644"),
        edit_line => sipxpark_config_contents(),
        classes => if_repaired("restart_sipxpark");

      "$(sipx.SIPX_CONFDIR)/orbits.xml"
        comment => "install sipxpark orbits config $(this.promiser)",
        create => "true",
        perms => m("644"),
        copy_from => copy_from_cfdata("$(sipx.location_id)/orbits.xml"),
        classes => if_repaired("restart_sipxpark");
}

bundle edit_line sipxpark_config_contents {
  insert_lines:
    any::
      "$(sipx.SIPX_CFDATA)/$(sipx.location_id)/sipxpark-config.part"
        insert_type => "file";
      "SIP_PARK_BIND_IP : $(sipx.bind_ip)";

  delete_lines:
    any::
      ".*";
}

bundle agent sipxpark_setup {
  methods:
    !src.sipxpark::
      "any" usebundle => rh_chkconfig_status("sipxpark on");
    !src.!sipxpark::
      "any" usebundle => rh_chkconfig_status("sipxpark off");
}

bundle agent sipxpark_running {
  vars:
    any::
      "service_command" string => "$(sipx.SIPX_BINDIR)/sipxpark";

  methods:
    any::
      "any" usebundle => find_sipxservice_by_command("$(service_command)","sipxpark_running");

  commands:
    (!sipxpark|stop_sipxecs).sipxpark_running::
      "$(sipx.SIPX_SERVICEDIR)/sipxpark"
        comment => "stop sipxpark",
        args => "stop";

    sipxpark.!sipxpark_running::
      "$(sipx.SIPX_SERVICEDIR)/sipxpark"
        comment => "start sipxpark",
        args => "start";

    sipxpark.sipxpark_running.restart_sipxpark::
      "$(sipx.SIPX_SERVICEDIR)/sipxpark"
        comment => "restart sipxpark",
        args => "restart";
}

# This code was extracted from park java code.  not sure how to handle this or when versions 
# this applies to --Douglas
#
# @Override
# public void onInitTask(String task) {
#     LOG.info("Starting park server migration");
#     File parkServerDirectory = new File(m_orbitsGenerator.getAudioDirectory());
#     File systemMohDirectory = new File(m_musicOnHoldManager.getAudioDirectoryPath());
#     try {
#         if (parkServerDirectory.exists()) {
#             LOG.info("Copying all files from " + m_orbitsGenerator.getAudioDirectory() + " to "
#                     + systemMohDirectory.getAbsolutePath());
#             FileUtils.copyDirectory(parkServerDirectory, systemMohDirectory);
#         }
#     } catch (IOException e) {
#         LOG.error("Unable to copy files/folder; " + e);
#     }
# }
