#! /usr/bin/env python

#----------------------------------------------------------------------
#
# Copyright (C) 2008 Nortel Networks
#
# This script performs SIPX installation on a system that has already
# had at least the following already set up:
#   Hostname
#   DNS Servers
#   eth0 IP address/mask
#   timezone
#   ntp servers
#   time (this need not be "correct" but must _not_ be in the future
#
# This script sets:
#   On a master system:
#      The SIP Domain
#      A self-signed ca certificate
#      A host certificate for xml-rpc and sip signed by that ca
#      VSFTP access for polycom phones
#   On a distributed system:
#      The master system name
#      Contacts master to get domain configuration
#
#   On any system:
#      Set the sipxecs service to start on reboot
#
#----------------------------------------------------------------------

import os, commands, sys, re, time, traceback, glob, signal, snack, locale

sys.path.insert(0,'@SIPX_LIBEXECDIR@')

import gettext
gettext.install('sipXecs', '@SIPX_DATADIR@/locale')
locale.setlocale(locale.LC_ALL, '')

from sipxecs_setup_common import *

global HostName
HostName = ''

def screen_sipx_startup ():
   global explain

   t = sipxecsGlobals()
   initialMessage = format_string2_5( t._('\
This wizard creates the bootstrap configuration\n\
for %s.\n\
\n\
Any existing configuration will be overwritten if you continue.\
'), '@SIPXECS_NAME@')
   grid = snack.Grid(2, 1)
   continueButton = snack.Button(t._("Continue"))
   grid.setField(continueButton, 0, 0, (1,0,1,1))

   exitButton = snack.Button(t._("Exit"))
   grid.setField(exitButton, 1, 0, (1,0,1,1))

   titleMessage = format_string2_5(t._('%s System Setup Wizard'), '@SIPXECS_NAME@')
   f = screen_setup(titleMessage, initialMessage, grid)
   choice = f.run()

   screen_end()

   if choice == exitButton :
       log_printout("initial screen exit")
       cleanExit()

def refresh_sipxconfig_db () :
    
    progress(95, sipxecsGlobals()._('Refreshing configuration database') )
    show_progress()

    cmdoutput=commands.getoutput('@SIPX_BINDIR@/sipxconfig.sh --first-run')
    log_printout(cmdoutput)

#======================================================================
# MAIN SCRIPT BODY STARTS HERE
#======================================================================

#--- Get command line arguments

log_init()

log_printout("Start @SIPX_VERSION@")

screen_init()

try:
    chooseLanguage()
    progress(1, format_string2_5(sipxecsGlobals()._("Start %s Services Setup"), '@SIPXECS_NAME@'))
    screen_sipx_startup()

    checkSystemType()
    do_sipx_setup()

    refresh_sipxconfig_db()

    progress(100, sipxecsGlobals()._('Ready'))
    setup_completed()
    # setup_completed does not return

except:
    excType, excData, excTrace = sys.exc_info()
    if   excType == KeyboardInterrupt:
        log_printout('*** User Interrupt Detected ***' )
    elif excType == SystemExit:
        log_printout('%s' % str (excData) )
    else:
        errStack = traceback.extract_tb(excTrace)[-1]
        errMsg   = 'UNEXPECTED EXCEPTION CAPTURED:\n\n'
        errMsg  += '%s: %s ' % (str(excType), str(excData))
        errMsg  += '(exception occured in file: %s, line: %s)\n\n' % (errStack[0], errStack[1])
        errMsg += traceback.format_exc()
        abortMsgAndExit( errMsg )
    cleanExit()


