#!/bin/env ruby

# When an alarm is received, dispatch ones meant for email here
# STDIN is alarm body

require 'optparse'
require 'erb'
require 'yaml'
require 'net/smtp'

def dispatch(yaml, template, send, input_stream)
  data = YAML::load_file(yaml)
  alarm = parse_alarm(input_stream)
  data['emails'].each_key {|template_id|
    recipients = get_recipients(data, template_id, alarm)
    unless recipients.nil? || recipients.empty?
      this_template = sprintf(template, template_id)
      msg = get_email(data, alarm, this_template, recipients)
      if send
        Net::SMTP.start(data[:smtp]) do |smtp|
          smtp.send_message(msg, data[:from], recipients)
        end
      else
        print msg
      end
    end
  }
end

def get_recipients(data, template, alarm)
  group = data['alarms'][alarm.id]
  return nil if group.nil?
  return data['emails'][template][group]
end


def get_email(data, alarm, template, recipients)
  erb = ERB.new(File.read(template))
  erb.filename = template
  var = binding
  # this is magic that allows in yaml file
  #   who : world
  # when run thru
  #  hello <%= who %>
  # be
  #  hello world
  data.each_key { |x|
    eval "#{x} = data['#{x}']", var
  }
  return erb.result(var)
end

def parse_alarm(input_stream)
  alarm = Struct.new(:id, :message).new
  input_stream.each {|line|
    if line =~ /^SIPXECS-ALARM-NOTIFICATION-MIB::sipxecsAlarmId/
      alarm.id = line.split[1]
    end
  }
  return alarm.id.nil? ? nil : alarm
end

if __FILE__ == $0

args = OptionParser.new { |opts|
  opts.banner = "Usage : sipx-config-maker [options]"

  opts.separator ""
  opts.separator "Options:"

  opts.on("--help", "Print this help message.") {
    puts opts
    exit
  }

  $template = '@SIPX_CONFDIR@/snmp/%s'
  opts.on("--template FILE", "ERB formated template for emailing.") {|f|
    $template = f
  }

  opts.on("--in FILE", "YAML formated file for email addresses for alarm traps.") {|f|
    $yaml = f
  }

  $out = nil
  opts.on("--out FILE", "Write to file, otherwise email is sent") {|f|
    $out = File.open(f, 'w')
  }

  $send = false
  opts.on("--send", "Actually send the mesage, otherwise print to stdout") {
    $send = true
  }
}
args.parse!
  raise "Missing --in missing parameter to an yaml file" if $yaml.nil?
  dispatch($yaml, $template, $send, STDIN)
end
